{"version":3,"file":"static/js/220.e9c91259.chunk.js","mappings":"uOAMO,SAASA,IAEd,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,KAI7BC,EAAAA,EAAAA,YAAU,WACRL,GAASM,EAAAA,EAAAA,MACX,GAAG,CAACN,IAEJ,IAAMO,GAAeC,EAAAA,EAAAA,cAAY,SAACC,GAEhCT,GAASU,EAAAA,EAAAA,IAAoB,CAAEC,GAAGF,EAAIG,OAAOD,KAE/C,GAAG,CAACX,IAOJ,OACEE,EAASW,KAAI,SAAAC,GAAO,OAEpB,2BAAqB,yBAAMA,EAAQC,QAAW,2BAAK,IAAED,EAAQE,WAC7D,mBAAQC,QAASV,EAAcI,GAAIG,EAAQH,GAAIO,KAAK,SAAQ,SAAE,cADrDJ,EAAQH,GACkE,GAIvF,CC/BO,IAAMQ,EAAc,WAEvB,IAAMnB,GAAWC,EAAAA,EAAAA,MAEXmB,GAAeZ,EAAAA,EAAAA,cAAY,SAACO,EAAMC,GAEpChB,GAASqB,EAAAA,EAAAA,IAAkB,CAAEN,KAAMA,EAAKO,MAAON,OAAQA,EAAOM,QAEjE,GAAG,CAACtB,IAECuB,GAAUpB,EAAAA,EAAAA,IAAYqB,EAAAA,IAaxB,OACI,+BAEI,iBAAMC,SAbD,SAAChB,QACHiB,IAAPjB,GACAA,EAAIkB,iBAER,MAAyBlB,EAAIG,OAArBG,EAAI,EAAJA,KAAMC,EAAM,EAANA,OAEdI,EAAaL,EAAKC,EACtB,EAMqC,UACrB,iBAAKY,MAAO,CAACC,QAAS,QAAQ,WAC9B,4BACI,2BAAO,UAGP,kBAEIX,KAAK,OACLH,KAAK,OACLO,MAAOC,EAAQR,KACfe,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAKhB,4BACI,2BAAO,WACP,kBAEId,KAAK,MACLH,KAAK,SACLO,MAAOC,EAAQP,OACfc,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAKhB,mBAASd,KAAK,SAAQ,SAAC,sBAM3C,E,UCjEO,SAASe,IAEd,IAAMjC,GAAWC,EAAAA,EAAAA,MACXiC,GAAS/B,EAAAA,EAAAA,IAAYgC,EAAAA,IASzB,OACE,mBAAOP,MAAO,CAACC,QAAS,OAAQO,eAAgB,UAAU,UAAC,WACvD,kBAAOC,SATM,SAAC5B,GAEpBT,GAASsC,EAAAA,EAAAA,GAAU7B,EAAIG,OAAOU,OAEhC,EAMQJ,KAAK,OACLH,KAAK,SACLO,MAAOY,EACPJ,QAAQ,yHACRC,MAAM,6IAMd,CCpBF,IAqBA,EArBqB,WAGnB,OACE,iCACE,eAAIH,MAAO,CAACC,QAAS,OACfO,eAAgB,SAChBG,YAAa,SACbC,aAAc,MACdC,MAAO,QACPC,WAAY,cAAe,SAAC,gBAC5B,SAACvB,EAAW,KACZ,eAAIS,MAAO,CAACC,QAAS,OAAQO,eAAgB,UAAU,SAAC,eACxD,SAACH,EAAM,KACP,yBACA,SAAElC,EAAQ,QAItB,C","sources":["components/Contacts/Contacts.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useCallback, useEffect} from 'react';\nimport { useSelector,useDispatch  } from 'react-redux';\nimport { getContactsThunk, deleteContactsThunk } from 'Redux/contacts/contacts.thunk';\nimport {  selectFilteredContacts } from 'Redux/contacts/contacts.selectors';\n\nexport function Contacts()  {\n\n  const dispatch = useDispatch();\n \n  const contacts = useSelector(selectFilteredContacts);\n  \n  \n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const handleDelete = useCallback((evt) => {\n        \n    dispatch(deleteContactsThunk({ id:evt.target.id } )) \n        \n  }, [dispatch]);  \n    \n  //replace funcion on selector\n  /*const getFilterValueOn = (element) => {\n      return element.name.toLowerCase().includes(filter.toLowerCase())\n  }*/\n  \n  return (\n    contacts.map(element => \n   // getFilterValueOn(element) && replace funcion on selector\n    <li key={element.id}><div>{element.name}</div><div> {element.number}</div>\n    <button onClick={handleDelete} id={element.id} type=\"button\" >delete </button></li>\n    )\n  )\n     \n}\n    \nContacts.propTypes = {\n    element: PropTypes.shape({\n    name: PropTypes.string,\n    number: PropTypes.string,\n    }),\n  onDelete: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useCallback } from 'react';\nimport { getContact } from '../../Redux/contacts/contacts.selectors';\nimport { postContactsThunk } from 'Redux/contacts/contacts.thunk';\n\nexport const ContactForm = () => {\n    \n    const dispatch = useDispatch();\n    \n    const handleSubmit = useCallback((name, number) => {\n    \n        dispatch(postContactsThunk({ name: name.value, number: number.value }))\n    \n     }, [dispatch])\n    \n    const contact = useSelector(getContact);     \n\n    \n    const onSubmit = (evt) =>{\n        if (evt !==undefined) {\n            evt.preventDefault();\n        }\n        const { name, number } = evt.target;\n        \n        handleSubmit(name,number);\n    }\n\n\n        return (\n            <>\n        \n                <form onSubmit={onSubmit}>\n                    <div style={{display: 'flex'}}>\n                    <div>\n                        <label>Name</label>\n            \n               \n                        <input \n                  \n                            type=\"text\"\n                            name=\"name\"\n                            value={contact.name}\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                            required\n                        \n                        />\n                    </div>\n            \n                    <div>\n                        <label>Phone</label>\n                        <input \n                \n                            type=\"tel\"\n                            name=\"number\"\n                            value={contact.number}\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                            required\n                        />\n                    </div>\n           \n    \n                    <button  type=\"submit\">Add contact</button>\n                    </div>\n                </form>\n            </>\n        )\n  \n}    \n\nContactForm.propTypes = {\n    handleSubmit: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'Redux/filter/filter.slice';\nimport { getFilter } from 'Redux/contacts/contacts.selectors';\n\nexport function Filter()  {\n   \n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);  \n  \n  const handleFilter = (evt) => {\n     \n    dispatch(setFilter(evt.target.value)) \n\n  }\n  \n  \n    return (\n      <label style={{display: 'flex', justifyContent: 'center'}}> Filter\n          <input onChange={handleFilter}\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n        </label>\n   \n    )\n    \n  } \n\n  Filter.propTypes = {\n    handleSubmit: PropTypes.func,\n}; \n","import { Contacts } from '../../components/Contacts/Contacts';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { Filter } from '../../components/Filter/Filter';\n\n//import { NotFound } from '../../components/NotFound/NotFound';\n//import { PostsItem } from '../../components/Posts/PostsItem';\n//import { PostsLoader } from '../../components/Posts/PostsLoader';\n//import { STATUS } from '../../constants/status.constants';\n//import { getPostsThunk } from '../../redux/posts/posts.thunk';\n\nconst ContactsPage = () => {\n \n\n  return (\n    <>\n      <h1 style={{display: 'flex',\n            justifyContent: 'center',\n            borderStyle: 'outset',\n            borderRadius: '10%',\n            color: 'white',\n            background: 'dodgerblue',}}>Phonebook </h1>\n            <ContactForm   />\n            <h2 style={{display: 'flex', justifyContent: 'center'}}>Contacts </h2>\n            <Filter />\n            <ul>\n            < Contacts />\n            </ul>\n    </>\n  );\n};\n\nexport default ContactsPage;"],"names":["Contacts","dispatch","useDispatch","contacts","useSelector","selectFilteredContacts","useEffect","getContactsThunk","handleDelete","useCallback","evt","deleteContactsThunk","id","target","map","element","name","number","onClick","type","ContactForm","handleSubmit","postContactsThunk","value","contact","getContact","onSubmit","undefined","preventDefault","style","display","pattern","title","required","Filter","filter","getFilter","justifyContent","onChange","setFilter","borderStyle","borderRadius","color","background"],"sourceRoot":""}